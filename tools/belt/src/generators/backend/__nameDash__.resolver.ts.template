import { Resolver, Query, Mutation, Args, Parent, ResolveField } from '@nestjs/graphql';
import { <%= clazz %>Service } from './<%= nameDash %>.service';
import { <%= clazz %>Entity, <%= clazz %>Create, <%= clazz %>Update } from './<%= nameDash %>.entity';

@Resolver(() => <%= clazz %>Entity)
export class <%= clazz %>Resolver {
	constructor(private readonly <%= name %>Service: <%= clazz %>Service
<% for (let [key, value] of Object.entries(relationFieldTyped)) { %>
	, private <%= value[0].relation.name %>Service: <%= key %>Service
<% } %>
	) { }

	@Mutation(() => <%= clazz %>Entity)
	create<%= clazz %>(
		@Args('create<%= clazz %>Input') create<%= clazz %>Input: <%= clazz %>Create
	) {
		return this.<%= name %>Service.create(create<%= clazz %>Input);
	}

	@Query(() => [<%= clazz %>Entity], { name: '<%= name %>' })
	findAll() {
		return this.<%= name %>Service.findAll();
	}

	@Query(() => <%= clazz %>Entity, { name: '<%= name %>Id' })
	findOne(@Args('id', { type: () => String }) id: string) {
		return this.<%= name %>Service.findOne(id);
	}

	@Mutation(() => <%= clazz %>Entity)
	update<%= clazz %>(
		@Args('update<%= clazz %>Input') update<%= clazz %>Input: <%= clazz %>Update
	) {
		return this.<%= name %>Service.update(
			update<%= clazz %>Input._id,
			update<%= clazz %>Input
		);
	}

	@Mutation(() => <%= clazz %>Entity)
	remove<%= clazz %>(@Args('id', { type: () => String }) id: string) {
		return this.<%= name %>Service.remove(id);
	}

<% for (let field of relationFields) { %>
	@ResolveField(() => <%= field.type %>)
	async role(@Parent() parent: <%= clazz %>Entity) {
		return await this.<%= field.relation.name %>Service.findOne(parent.<%= field.name %> as any);
	}

<% } %>
}
