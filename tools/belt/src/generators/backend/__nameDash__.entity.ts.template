import { <%= clazz %> } from '@lv/common';
import { Field, InputType, ObjectType } from '@nestjs/graphql';
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
<% for (let field of relationFields) { %>
import { <%= field.type %> } from '<%= field.relation.importPath %>.entity';
<%  } %>

@InputType("<%= clazz %>Input")
@ObjectType()
@Schema()
export class <%= clazz %>Entity implements <%= clazz %> {
	@Field()
	_id: string;

<% for (let field of fields) { %>
	<% if (field.relation) { %>
	@Field(() => <%= field.type %><%= field.required ? '' : ', { nullable: true }' %>)
	@Prop({ type: String, ref: <%= field.type %>.name })
	<% } else if (field.required) { %>
	@Field()
	<% } else { %>
	@Field({ nullable: true })
	<% } %>
	@Prop()
	<%= field.name + (field.required ? '' : '?') %>: <%= field.type %>;

<%  } %>
}

@InputType()
export class <%= clazz %>Create {
<% for (let field of createFields) { %>
	<% if (field.required) { %>
	@Field()
	<% } else { %>
	@Field({ nullable: true })
	<% } %>
	@Prop()
	<%= field.name + (field.required ? '' : '?') %>: <%= field.relation ? 'string' : field.type %>;

<%  } %>
}

@InputType()
export class <%= clazz %>Update {
	@Field()
	_id: string;

<% for (let field of updateFields) { %>
	<% if (field.required) { %>
	@Field()
	<% } else { %>
	@Field({ nullable: true })
	<% } %>
	@Prop()
	<%= field.name + (field.required ? '' : '?') %>: <%= field.relation ? 'string' : field.type %>;

<%  } %>
}

export const <%= clazz %>Schema = SchemaFactory.createForClass(<%= clazz %>Entity);
