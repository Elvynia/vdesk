<% if (formFieldCurrencies.length > 0) { %>
import { CurrencyPipe } from '@angular/common';
<% } %>
import { Component, Input, OnInit } from '@angular/core';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { <%= clazz %>, <%= clazz %>State } from '@lv/common';
import { Actions, ofType } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { takeUntil } from 'rxjs';
import { ObserverCompomix } from '../../util/mixins/observer.compomix';
<% if (formFieldCheckboxes.length > 0) { %>
import { MatCheckboxModule } from '@angular/material/checkbox';
<% } %>
<% if (formFieldSelects.length > 0) { %>
import { MatSelectModule } from '@angular/material/select';
<% } %>
<% for (let [key, value] of Object.entries(formFieldSelectTyped)) { %>
import { <%= key %>, <%= key %>State, <%= value[0].component.storeSelect %> } from '@lv/common';
import { <%= value[0].relation.name %>Actions %> } from '../../<%= value[0].relation.nameDash %>/<%= value[0].relation.nameDash %>.actions';
<% } %>
<% if (formFieldCurrencies.length > 0) { %>
import { CurrencyFormatDirective } from '../../util/format/currency-format.directive';
<% } %>
<% if (formFieldFloats.length > 0) { %>
import { DecimalFormatDirective } from '../../util/format/decimal-format.directive';
<% } %>
<% if (formFieldNumbers.length > 0) { %>
import { DigitsFormatDirective } from '../../util/format/digits-format.directive';
<% } %>

@Component({
	selector: 'lv-<%= nameDash %>-form',
	imports: [
		MatFormFieldModule,
		MatInputModule,
<% if (formFieldCheckboxes.length > 0) { %>
		MatCheckboxModule,
<% } %>
<% if (formFieldDates.length > 0) { %>
		MatDatepickerModule,
		MatNativeDateModule,
<% } %>
<% if (formFieldSelects.length > 0) { %>
		MatSelectModule,
<% } %>
		ReactiveFormsModule,
<% if (formFieldCurrencies.length > 0) { %>
		CurrencyFormatDirective,
<% } %>
<% if (formFieldNumbers.length > 0) { %>
		DigitsFormatDirective,
<% } %>
<% if (formFieldFloats.length > 0) { %>
		DecimalFormatDirective,
<% } %>
	],
<% if (formFieldDates.length > 0 || formFieldCurrencies.length > 0) { %>
	providers: [
	<% if (formFieldDates.length > 0) { %>
		provideNativeDateAdapter({
			parse: {
				dateInput: 'DD/MM/YYYY',
			},
			display: {
				dateInput: 'DD/MM/YYYY',
				monthYearLabel: 'MMMM YYYY',
				dateA11yLabel: 'LL',
				monthYearA11yLabel: 'MMMM YYYY'
			},
		}),
		{ provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },
	<% } %>
	<% if (formFieldCurrencies.length > 0) { %>
		CurrencyPipe,
	<% } %>
	],
<% } %>
	templateUrl: './form.component.html',
	styleUrl: './form.component.scss'
})
export class <%= clazz %>FormComponent extends ObserverCompomix() implements OnInit {
	@Input() group!: FormGroup;
	@Input() value?: <%= clazz %>;
<% for (let [key, value] of Object.entries(formFieldSelectTyped)) { %>
	<%= value[0].relation.name %>List: <%= key %>[];
<% } %>

	constructor(
<% if (formFieldSelects.length > 0) { %>
		private store: Store<
		<%= clazz %>State
	<% for (let [key, value] of Object.entries(formFieldSelectTyped)) { %>
		& <%= key %>State
	<% } %>
		>
<% } %>
	) {
		super();
<% for (let [key, value] of Object.entries(formFieldSelectTyped)) { %>
		this.<%= value[0].relation.name %>List = [];
<% } %>
	}

	ngOnInit(): void {
<% for (let [key, value] of Object.entries(formFieldSelectTyped)) { %>
		this.store.select(<%= value[0].component.storeSelect %>).pipe(
			takeUntil(this.destroy$)
		).subscribe((<%= value[0].relation.name %>List) => this.<%= value[0].relation.name %>List = Object.values(<%= value[0].relation.name %>List));
		this.store.dispatch(<%= value[0].relation.name %>Actions.list());
<% } %>
	}

<% if (formFieldSelects.length > 0) { %>
	compareId(e1: any, e2: any) {
		return e1?._id === e2?._id;
	}
<%  } %>
}
