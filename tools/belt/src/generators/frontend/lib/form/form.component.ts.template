import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { <%= clazz %>, <%= clazz %>State } from '@lv/common';
import { Actions, ofType } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { finalize, first } from 'rxjs';
import { LoadingDirective } from '../../loading/loading.directive';
import { ObserverCompomix } from '../../util/mixins/observer.compomix';
import { <%= name %>Actions } from '../<%= name %>.actions';

@Component({
	selector: 'lv-<%= name %>-form',
	imports: [
		MatButtonModule,
		MatCardModule,
		MatFormFieldModule,
		MatInputModule,
		ReactiveFormsModule,
		LoadingDirective
	],
	templateUrl: './form.component.html',
	styleUrl: './form.component.scss'
})
export class <%= clazz %>FormComponent extends ObserverCompomix() implements OnInit, OnChanges {
	@Input() group!: FormGroup;
	@Input() value?: <%= clazz %>;
	@Output() back: EventEmitter<void>;
	@Output() save: EventEmitter<<%= clazz %>>;
	pending: boolean;

	constructor(private formBuilder: FormBuilder,
		private store: Store<<%= clazz %>State>,
		private actions: Actions
	) {
		super();
		this.back = new EventEmitter();
		this.save = new EventEmitter();
		this.pending = false;
	}

	ngOnInit(): void {
		if (!this.group) {
			this.reset();
		}
	}

	ngOnChanges(changes: SimpleChanges): void {
		if (changes['value']) {
			this.reset();
		}
	}

	cancel() {
		this.reset();
		this.back.next();
	}

	getEditValue() {
		const value = this.group.getRawValue();
		return {
			...value
		};
	}

	submit() {
		this.pending = true;
		this.save.next(this.getEditValue());
		this.actions.pipe(
			ofType(<%= name %>Actions.createSuccess, <%= name %>Actions.createError,
				<%= name %>Actions.updateSuccess, <%= name %>Actions.updateError
			),
			first(),
			finalize(() => this.pending = false)
		).subscribe();
	}

	private reset() {
		this.group = this.formBuilder.group({
			_id: [{
				value: this.value?._id,
				disabled: true
			}],
<% for (let field of fields) { %>
			<%= field.name %>: [this.value?.<%= field.name %>, <% if (field.required) { %> [Validators.required] <% } else { %> [] <% } %>],
<%  } %>
		})
	}
}
