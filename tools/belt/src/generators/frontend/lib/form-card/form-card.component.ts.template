import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { <%= clazz %>, <%= clazz %>State } from '@lv/common';
import { Actions, ofType } from '@ngrx/effects';
import { filter, finalize, first } from 'rxjs';
import { LoadingDirective } from '../../loading/loading.directive';
import { <%= name %>Actions } from '../<%= nameDash %>.actions';
import { <%= clazz %>FormComponent } from '../form/form.component';

@Component({
	selector: 'lv-<%= nameDash %>-form-card',
	imports: [
		<%= clazz %>FormComponent,
		MatButtonModule,
		MatCardModule,
		LoadingDirective,
	],
	templateUrl: './form-card.component.html',
	styleUrl: './form-card.component.scss'
})
export class <%= clazz %>FormCardComponent implements OnInit, OnChanges {
	@Input() value?: <%= clazz %>;
	@Output() back: EventEmitter<void>;
	@Output() save: EventEmitter<<%= clazz %>>;
	group!: FormGroup;
	pending: boolean;

	constructor(private formBuilder: FormBuilder,
		private actions: Actions
	) {
		this.back = new EventEmitter();
		this.save = new EventEmitter();
		this.pending = false;
	}

	ngOnInit(): void {
		if (!this.group) {
			this.reset();
		}
	}

	ngOnChanges(changes: SimpleChanges): void {
		if (changes['value']) {
			this.reset();
		}
	}

	cancel() {
		this.reset();
		this.back.next();
	}

	getEditValue() {
		const value = this.group.getRawValue();
		if (value._id) {
			return {
				_id: value._id,
<% for (let field of updateFields) { %>
	<% if (field.relation) { %>
				<%= field.name %>: value.<%= field.name %><%= field.required ? '' : '?' %>._id,
	<% } else if (field.type === 'number') { %>
		<% if (field.currency) { %>
				<%= field.name %>: parseFloat(value.<%= field.name %>.replace(/[$€]/g, '')),
		<% } else if (field.float) { %>
				<%= field.name %>: parseFloat(value.<%= field.name %>),
		<% } else { %>
				<%= field.name %>: parseInt(value.<%= field.name %>),
		<% } %>
	<% } else if (field.type === 'float') { %>
				<%= field.name %>: parseFloat(value.<%= field.name %>),
	<% } else { %>
				<%= field.name %>: value.<%= field.name %>,
	<%  } %>
<%  } %>
			} as <%= clazz %>;
		} else {
			return {
<% for (let field of createFields) { %>
	<% if (field.relation) { %>
				<%= field.name %>: value.<%= field.name %><%= field.required ? '' : '?' %>._id,
	<% } else if (field.type === 'number') { %>
		<% if (field.currency) { %>
				<%= field.name %>: parseFloat(value.<%= field.name %>.replace(/[$€]/g, '')),
		<% } else if (field.float) { %>
				<%= field.name %>: parseFloat(value.<%= field.name %>),
		<% } else { %>
				<%= field.name %>: parseInt(value.<%= field.name %>),
		<% } %>
	<% } else { %>
				<%= field.name %>: value.<%= field.name %>,
	<%  } %>
<%  } %>
			} as <%= clazz %>;
		}
	}

	submit() {
		this.pending = true;
		this.save.next(this.getEditValue());
		this.actions.pipe(
			ofType(<%= name %>Actions.createSuccess, <%= name %>Actions.createError,
				<%= name %>Actions.updateSuccess, <%= name %>Actions.updateError
			),
			first(),
			filter(({ success }) => !!success),
			finalize(() => (this.pending = false))
		).subscribe(() => this.reset());
	}

	private reset() {
		this.group = this.formBuilder.group({
			_id: [{
				value: this.value?._id,
				disabled: true
			}],
<% for (let field of fields) { %>
			<%= field.name %>: [this.value?.<%= field.name %>, <% if (field.required) { %> [Validators.required] <% } else { %> [] <% } %>],
<%  } %>
		})
	}
}
